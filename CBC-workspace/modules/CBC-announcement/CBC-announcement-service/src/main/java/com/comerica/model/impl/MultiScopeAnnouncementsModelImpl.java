/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.comerica.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.comerica.model.MultiScopeAnnouncements;
import com.comerica.model.MultiScopeAnnouncementsModel;
import com.comerica.model.MultiScopeAnnouncementsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MultiScopeAnnouncements service. Represents a row in the &quot;MultiScopeAnnouncements_MultiScopeAnnouncements&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MultiScopeAnnouncementsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MultiScopeAnnouncementsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MultiScopeAnnouncementsImpl
 * @see MultiScopeAnnouncements
 * @see MultiScopeAnnouncementsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class MultiScopeAnnouncementsModelImpl extends BaseModelImpl<MultiScopeAnnouncements>
	implements MultiScopeAnnouncementsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a multi scope announcements model instance should use the {@link MultiScopeAnnouncements} interface instead.
	 */
	public static final String TABLE_NAME = "MultiScopeAnnouncements_MultiScopeAnnouncements";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "entryId", Types.BIGINT },
			{ "multiScopeId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("multiScopeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table MultiScopeAnnouncements_MultiScopeAnnouncements (uuid_ VARCHAR(75) null,entryId LONG not null primary key,multiScopeId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table MultiScopeAnnouncements_MultiScopeAnnouncements";
	public static final String ORDER_BY_JPQL = " ORDER BY multiScopeAnnouncements.multiScopeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MultiScopeAnnouncements_MultiScopeAnnouncements.multiScopeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(CBC.announcement.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.comerica.model.MultiScopeAnnouncements"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(CBC.announcement.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.comerica.model.MultiScopeAnnouncements"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(CBC.announcement.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.comerica.model.MultiScopeAnnouncements"),
			true);
	public static final long MULTISCOPEID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MultiScopeAnnouncements toModel(
		MultiScopeAnnouncementsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MultiScopeAnnouncements model = new MultiScopeAnnouncementsImpl();

		model.setUuid(soapModel.getUuid());
		model.setEntryId(soapModel.getEntryId());
		model.setMultiScopeId(soapModel.getMultiScopeId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MultiScopeAnnouncements> toModels(
		MultiScopeAnnouncementsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MultiScopeAnnouncements> models = new ArrayList<MultiScopeAnnouncements>(soapModels.length);

		for (MultiScopeAnnouncementsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(CBC.announcement.service.util.ServiceProps.get(
				"lock.expiration.time.com.comerica.model.MultiScopeAnnouncements"));

	public MultiScopeAnnouncementsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MultiScopeAnnouncements.class;
	}

	@Override
	public String getModelClassName() {
		return MultiScopeAnnouncements.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("entryId", getEntryId());
		attributes.put("multiScopeId", getMultiScopeId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long entryId = (Long)attributes.get("entryId");

		if (entryId != null) {
			setEntryId(entryId);
		}

		Long multiScopeId = (Long)attributes.get("multiScopeId");

		if (multiScopeId != null) {
			setMultiScopeId(multiScopeId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getEntryId() {
		return _entryId;
	}

	@Override
	public void setEntryId(long entryId) {
		_entryId = entryId;
	}

	@JSON
	@Override
	public long getMultiScopeId() {
		return _multiScopeId;
	}

	@Override
	public void setMultiScopeId(long multiScopeId) {
		_columnBitmask = -1L;

		if (!_setOriginalMultiScopeId) {
			_setOriginalMultiScopeId = true;

			_originalMultiScopeId = _multiScopeId;
		}

		_multiScopeId = multiScopeId;
	}

	public long getOriginalMultiScopeId() {
		return _originalMultiScopeId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MultiScopeAnnouncements.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MultiScopeAnnouncements toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MultiScopeAnnouncements)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MultiScopeAnnouncementsImpl multiScopeAnnouncementsImpl = new MultiScopeAnnouncementsImpl();

		multiScopeAnnouncementsImpl.setUuid(getUuid());
		multiScopeAnnouncementsImpl.setEntryId(getEntryId());
		multiScopeAnnouncementsImpl.setMultiScopeId(getMultiScopeId());
		multiScopeAnnouncementsImpl.setUserId(getUserId());
		multiScopeAnnouncementsImpl.setUserName(getUserName());
		multiScopeAnnouncementsImpl.setCreateDate(getCreateDate());
		multiScopeAnnouncementsImpl.setModifiedDate(getModifiedDate());

		multiScopeAnnouncementsImpl.resetOriginalValues();

		return multiScopeAnnouncementsImpl;
	}

	@Override
	public int compareTo(MultiScopeAnnouncements multiScopeAnnouncements) {
		int value = 0;

		if (getMultiScopeId() < multiScopeAnnouncements.getMultiScopeId()) {
			value = -1;
		}
		else if (getMultiScopeId() > multiScopeAnnouncements.getMultiScopeId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MultiScopeAnnouncements)) {
			return false;
		}

		MultiScopeAnnouncements multiScopeAnnouncements = (MultiScopeAnnouncements)obj;

		long primaryKey = multiScopeAnnouncements.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MultiScopeAnnouncementsModelImpl multiScopeAnnouncementsModelImpl = this;

		multiScopeAnnouncementsModelImpl._originalUuid = multiScopeAnnouncementsModelImpl._uuid;

		multiScopeAnnouncementsModelImpl._originalMultiScopeId = multiScopeAnnouncementsModelImpl._multiScopeId;

		multiScopeAnnouncementsModelImpl._setOriginalMultiScopeId = false;

		multiScopeAnnouncementsModelImpl._setModifiedDate = false;

		multiScopeAnnouncementsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MultiScopeAnnouncements> toCacheModel() {
		MultiScopeAnnouncementsCacheModel multiScopeAnnouncementsCacheModel = new MultiScopeAnnouncementsCacheModel();

		multiScopeAnnouncementsCacheModel.uuid = getUuid();

		String uuid = multiScopeAnnouncementsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			multiScopeAnnouncementsCacheModel.uuid = null;
		}

		multiScopeAnnouncementsCacheModel.entryId = getEntryId();

		multiScopeAnnouncementsCacheModel.multiScopeId = getMultiScopeId();

		multiScopeAnnouncementsCacheModel.userId = getUserId();

		multiScopeAnnouncementsCacheModel.userName = getUserName();

		String userName = multiScopeAnnouncementsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			multiScopeAnnouncementsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			multiScopeAnnouncementsCacheModel.createDate = createDate.getTime();
		}
		else {
			multiScopeAnnouncementsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			multiScopeAnnouncementsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			multiScopeAnnouncementsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return multiScopeAnnouncementsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", entryId=");
		sb.append(getEntryId());
		sb.append(", multiScopeId=");
		sb.append(getMultiScopeId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.comerica.model.MultiScopeAnnouncements");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entryId</column-name><column-value><![CDATA[");
		sb.append(getEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>multiScopeId</column-name><column-value><![CDATA[");
		sb.append(getMultiScopeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MultiScopeAnnouncements.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MultiScopeAnnouncements.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _entryId;
	private long _multiScopeId;
	private long _originalMultiScopeId;
	private boolean _setOriginalMultiScopeId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private MultiScopeAnnouncements _escapedModel;
}